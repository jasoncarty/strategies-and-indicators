name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        # Install Docker Compose
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

        # Verify Docker Compose installation
        docker-compose --version

    - name: Check Docker and Docker Compose
      run: |
        docker --version
        docker-compose --version

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Show Docker Compose configuration
      run: |
        echo "üìã Docker Compose configuration:"
        docker-compose --env-file docker.test.env config

        echo ""
        echo "üîß Environment variables from docker.test.env:"
        cat docker.test.env

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-html

    - name: Create test environment
      run: |
        mkdir -p logs
        mkdir -p ML_Webserver/logs
        mkdir -p analytics/logs

    - name: Start Docker services with docker-compose
      timeout-minutes: 10
      run: |
        # Source environment variables for use in this step
        echo "üîß Loading environment variables..."
        export $(cat docker.test.env | grep -v '^#' | xargs)
        echo "‚úÖ Environment variables loaded:"
        echo "   MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD"
        echo "   ANALYTICS_PORT: $ANALYTICS_PORT"
        echo "   ML_SERVICE_PORT: $ML_SERVICE_PORT"

        # Build the custom services first
        echo "üî® Building Docker services..."
        docker-compose --env-file docker.test.env build

        # Start all services using docker-compose with test profile
        echo "üöÄ Starting Docker services..."
        docker-compose --env-file docker.test.env up -d

        # Show running containers
        echo "üìã Running containers:"
        docker-compose --env-file docker.test.env ps

        # Wait for MySQL to be ready (with timeout)
        echo "‚è≥ Waiting for MySQL to be ready..."
        timeout=120
        counter=0
        while ! docker-compose --env-file docker.test.env exec -T mysql mysqladmin ping -h"localhost" -u"root" -p"$MYSQL_ROOT_PASSWORD" --silent; do
          echo "Waiting for MySQL... (${counter}s/${timeout}s)"
          sleep 5
          counter=$((counter + 5))
          if [ $counter -ge $timeout ]; then
            echo "‚ùå MySQL failed to start within ${timeout}s"
            docker-compose --env-file docker.test.env logs mysql
            exit 1
          fi
        done
        echo "‚úÖ MySQL is ready!"

        # Wait for analytics service to be ready (with timeout)
        echo "‚è≥ Waiting for analytics service to be ready..."
        counter=0
        while ! curl -f "http://localhost:$ANALYTICS_PORT/health" > /dev/null 2>&1; do
          echo "Waiting for analytics service... (${counter}s/${timeout}s)"
          sleep 5
          counter=$((counter + 5))
          if [ $counter -ge $timeout ]; then
            echo "‚ùå Analytics service failed to start within ${timeout}s"
            docker-compose --env-file docker.test.env logs analytics
            exit 1
          fi
        done
        echo "‚úÖ Analytics service is ready!"

        # Wait for ML service to be ready (with timeout)
        echo "‚è≥ Waiting for ML service to be ready..."
        counter=0
        while ! curl -f "http://localhost:$ML_SERVICE_PORT/health" > /dev/null 2>&1; do
          echo "Waiting for ML service... (${counter}s/${timeout}s)"
          sleep 5
          counter=$((counter + 5))
          if [ $counter -ge $timeout ]; then
            echo "‚ùå ML service failed to start within ${timeout}s"
            docker-compose --env-file docker.test.env logs ml_service
            exit 1
          fi
        done
        echo "‚úÖ ML service is ready!"

        echo "üéâ All services are ready!"

        # Final status check
        echo "üìä Final service status:"
        docker-compose --env-file docker.test.env ps
        echo "üîç Service health checks:"
        curl -s "http://localhost:$ANALYTICS_PORT/health" | jq . || echo "Analytics health check failed"
        curl -s "http://localhost:$ML_SERVICE_PORT/health" | jq . || echo "ML service health check failed"

    - name: Run all tests
      run: |
        # Make the test script executable
        chmod +x scripts/run_tests.sh

        # Run the test suite
        ./scripts/run_tests.sh

    - name: Stop Docker services
      if: always()
      run: |
        docker-compose --env-file docker.test.env down -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./htmlcov/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          logs/
          ML_Webserver/logs/
          analytics/logs/
          analytics/analytics.log
          ML_Webserver/ml_service.log

#!/usr/bin/env python3
"""
Test Enhanced Parameter Export
Demonstrates how the ML trainer exports optimized parameters for EA use
"""

import json
import os
from datetime import datetime

def create_sample_optimized_parameters():
    """Create sample optimized parameters to demonstrate the enhanced export"""
    
    # Sample optimized parameters that would be generated by the ML trainer
    sample_params = {
        "models": [
            {
                "model_type": "buy",
                "accuracy": 0.72,
                "feature_importance": [
                    {"feature": "rsi", "importance": 0.25},
                    {"feature": "volume_ratio", "importance": 0.20},
                    {"feature": "macd_main", "importance": 0.18},
                    {"feature": "trend", "importance": 0.15},
                    {"feature": "stoch_main", "importance": 0.12},
                    {"feature": "candle_pattern", "importance": 0.10}
                ],
                "data_points": 150,
                "optimized_parameters": {
                    "rsi_bullish_threshold": 25.0,
                    "rsi_bearish_threshold": 75.0,
                    "rsi_weight": 0.12,
                    "stoch_bullish_threshold": 15.0,
                    "stoch_bearish_threshold": 85.0,
                    "stoch_weight": 0.08,
                    "macd_threshold": 0.0001,
                    "macd_weight": 0.10,
                    "volume_ratio_threshold": 1.3,
                    "volume_weight": 0.12,
                    "pattern_bullish_weight": 0.15,
                    "pattern_bearish_weight": 0.15,
                    "zone_weight": 0.08,
                    "trend_weight": 0.10,
                    "base_confidence": 0.72,
                    "signal_agreement_weight": 0.55,
                    "min_prediction_threshold": 0.55,
                    "max_prediction_threshold": 0.45,
                    "neutral_zone_min": 0.45,
                    "neutral_zone_max": 0.55,
                    "min_confidence": 0.35,
                    "max_confidence": 0.90,
                    "position_sizing_multiplier": 1.2,
                    "stop_loss_adjustment": 0.5
                }
            },
            {
                "model_type": "sell",
                "accuracy": 0.68,
                "feature_importance": [
                    {"feature": "rsi", "importance": 0.22},
                    {"feature": "stoch_main", "importance": 0.20},
                    {"feature": "volume_ratio", "importance": 0.18},
                    {"feature": "macd_main", "importance": 0.16},
                    {"feature": "trend", "importance": 0.12},
                    {"feature": "candle_pattern", "importance": 0.12}
                ],
                "data_points": 120,
                "optimized_parameters": {
                    "rsi_bullish_threshold": 35.0,
                    "rsi_bearish_threshold": 65.0,
                    "rsi_weight": 0.10,
                    "stoch_bullish_threshold": 25.0,
                    "stoch_bearish_threshold": 75.0,
                    "stoch_weight": 0.12,
                    "macd_threshold": 0.0001,
                    "macd_weight": 0.08,
                    "volume_ratio_threshold": 1.7,
                    "volume_weight": 0.10,
                    "pattern_bullish_weight": 0.12,
                    "pattern_bearish_weight": 0.12,
                    "zone_weight": 0.08,
                    "trend_weight": 0.08,
                    "base_confidence": 0.68,
                    "signal_agreement_weight": 0.50,
                    "min_prediction_threshold": 0.50,
                    "max_prediction_threshold": 0.50,
                    "neutral_zone_min": 0.45,
                    "neutral_zone_max": 0.55,
                    "min_confidence": 0.35,
                    "max_confidence": 0.90,
                    "position_sizing_multiplier": 1.2,
                    "stop_loss_adjustment": 0.5
                }
            },
            {
                "model_type": "combined",
                "accuracy": 0.70,
                "feature_importance": [
                    {"feature": "rsi", "importance": 0.24},
                    {"feature": "volume_ratio", "importance": 0.19},
                    {"feature": "macd_main", "importance": 0.17},
                    {"feature": "stoch_main", "importance": 0.15},
                    {"feature": "trend", "importance": 0.13},
                    {"feature": "candle_pattern", "importance": 0.12}
                ],
                "data_points": 270,
                "optimized_parameters": {
                    "rsi_bullish_threshold": 30.0,
                    "rsi_bearish_threshold": 70.0,
                    "rsi_weight": 0.11,
                    "stoch_bullish_threshold": 20.0,
                    "stoch_bearish_threshold": 80.0,
                    "stoch_weight": 0.10,
                    "macd_threshold": 0.0001,
                    "macd_weight": 0.09,
                    "volume_ratio_threshold": 1.5,
                    "volume_weight": 0.11,
                    "pattern_bullish_weight": 0.13,
                    "pattern_bearish_weight": 0.13,
                    "zone_weight": 0.08,
                    "trend_weight": 0.09,
                    "base_confidence": 0.70,
                    "signal_agreement_weight": 0.52,
                    "min_prediction_threshold": 0.52,
                    "max_prediction_threshold": 0.48,
                    "neutral_zone_min": 0.4,
                    "neutral_zone_max": 0.6,
                    "min_confidence": 0.35,
                    "max_confidence": 0.90,
                    "position_sizing_multiplier": 1.2,
                    "stop_loss_adjustment": 0.5
                }
            }
        ],
        "training_date": datetime.now().isoformat(),
        "recommendation": "Use separate buy/sell models - significant performance difference detected (Buy: 72% vs Sell: 68%)",
        "ea_compatible": True,
        "version": "2.0"
    }
    
    return sample_params

def demonstrate_parameter_usage():
    """Demonstrate how the EA would use these optimized parameters"""
    
    print("üéØ ENHANCED PARAMETER EXPORT DEMONSTRATION")
    print("=" * 60)
    
    # Create sample parameters
    params = create_sample_optimized_parameters()
    
    # Save to file
    os.makedirs('ml_models', exist_ok=True)
    with open('ml_models/ml_model_params.json', 'w') as f:
        json.dump(params, f, indent=2)
    
    print("‚úÖ Sample optimized parameters saved to ml_models/ml_model_params.json")
    print()
    
    # Demonstrate the key improvements
    print("üìä KEY IMPROVEMENTS FOR STRATEGY TESTER:")
    print()
    
    # 1. Separate Buy/Sell Models
    buy_model = next(m for m in params['models'] if m['model_type'] == 'buy')
    sell_model = next(m for m in params['models'] if m['model_type'] == 'sell')
    
    print("1. üéØ SEPARATE BUY/SELL MODELS:")
    print(f"   Buy Model Accuracy: {buy_model['accuracy']:.1%}")
    print(f"   Sell Model Accuracy: {sell_model['accuracy']:.1%}")
    print(f"   Performance Difference: {abs(buy_model['accuracy'] - sell_model['accuracy']):.1%}")
    print()
    
    # 2. Optimized Thresholds
    print("2. ‚öôÔ∏è  OPTIMIZED THRESHOLDS:")
    buy_params = buy_model['optimized_parameters']
    sell_params = sell_model['optimized_parameters']
    
    print("   RSI Thresholds:")
    print(f"     Buy:  {buy_params['rsi_bullish_threshold']:.0f} / {buy_params['rsi_bearish_threshold']:.0f} (more aggressive)")
    print(f"     Sell: {sell_params['rsi_bullish_threshold']:.0f} / {sell_params['rsi_bearish_threshold']:.0f} (more conservative)")
    print()
    
    print("   Volume Thresholds:")
    print(f"     Buy:  {buy_params['volume_ratio_threshold']:.1f} (lower - easier to trigger)")
    print(f"     Sell: {sell_params['volume_ratio_threshold']:.1f} (higher - more selective)")
    print()
    
    # 3. Feature Importance Based Weights
    print("3. üéØ FEATURE IMPORTANCE BASED WEIGHTS:")
    print("   Buy Model Top Features:")
    for i, feature in enumerate(buy_model['feature_importance'][:3]):
        print(f"     {i+1}. {feature['feature']}: {feature['importance']:.3f}")
    print()
    
    print("   Sell Model Top Features:")
    for i, feature in enumerate(sell_model['feature_importance'][:3]):
        print(f"     {i+1}. {feature['feature']}: {feature['importance']:.3f}")
    print()
    
    # 4. EA Compatibility
    print("4. üîß EA COMPATIBILITY:")
    print("   ‚úÖ Parameters exported in MQL5-readable format")
    print("   ‚úÖ No network requests required")
    print("   ‚úÖ Works perfectly in Strategy Tester")
    print("   ‚úÖ Optimized for rule-based predictions")
    print()
    
    # 5. Usage Instructions
    print("5. üìã USAGE INSTRUCTION:")
    print("   a) Run ML trainer: python strategy_tester_ml_trainer.py")
    print("   b) Copy ml_model_params.json to MetaTrader Common/Files")
    print("   c) EA automatically loads optimized parameters")
    print("   d) Strategy Tester uses enhanced rule-based predictions")
    print()
    
    print("üéâ BENEFITS FOR STRATEGY TESTER:")
    print("   ‚Ä¢ No network limitations - works offline")
    print("   ‚Ä¢ Faster execution - no API calls")
    print("   ‚Ä¢ Optimized parameters from ML training")
    print("   ‚Ä¢ Separate buy/sell models for better accuracy")
    print("   ‚Ä¢ Feature importance based optimization")
    print("   ‚Ä¢ Confidence-based position sizing")
    print()
    
    print("üí° NEXT STEPS:")
    print("   1. Run your Strategy Tester with the enhanced EA")
    print("   2. Train ML models with: python strategy_tester_ml_trainer.py")
    print("   3. Copy optimized parameters to MetaTrader")
    print("   4. Compare performance with and without ML optimization")
    print()
    
    print("=" * 60)

if __name__ == "__main__":
    demonstrate_parameter_usage() 
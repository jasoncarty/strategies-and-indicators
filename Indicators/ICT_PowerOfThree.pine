// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © fluxchart

//@version=5

const bool DEBUG = false
const int maxDistanceToLastBar = 4800 // Affects Running Time
const int maxPO3 = 75
const int atrLen = 50
const float accumulationExpandMult = 0.5

const color accumulationColor = #34352780
const color manipulationColor = #311c27dd
//const color distributionColor = #1c2d2a80

var initRun = true

indicator("ICT Power Of Three | Flux Charts", shorttitle = "Power Of Three | Flux Charts", overlay = true, max_boxes_count = 500, max_labels_count = 500, max_lines_count = 500, max_bars_back = maxDistanceToLastBar + 100)

// HHL, LLH, LHH
algorithmMode = input.string("Small Manipulation", "Algorithm Mode", options = ["Small Manipulation", "Short Accumulation", "Big Manipulation"], group = "General Configuration")
breakoutMethod = input.string("Wick", "Breakout Method", options = ["Close", "Wick"], group = "General Configuration")

string accumulationLengthStr = "Custom"
//int accumulationLength = input.int(40, "Minimum Accumulation Length", group = "General Configuration")
//accumulationLengthStr := input.string("High", "Accumulation Length", options = ["Low", "High"], group = "General Configuration")
if algorithmMode == "Small Manipulation"
    accumulationLengthStr := "High"
else
    accumulationLengthStr := "Low"
int accumulationLength = (accumulationLengthStr == "High" ? 40 : accumulationLengthStr == "Low" ? 11 : na)

string accumulationATRMultStr = "Custom"
//float accumulationATRMult = input.float(5, "Maximum Accumulation Size", step = 0.05, group = "General Configuration")
//accumulationATRMultStr := input.string("High", "Accumulation Size", options = ["Low", "High"], group = "General Configuration")
if algorithmMode == "Short Accumulation"
    accumulationATRMultStr := "Low"
else
    accumulationATRMultStr := "High"
float accumulationATRMult = (accumulationATRMultStr == "High" ? 5 : accumulationATRMultStr == "Low" ? 2 : na)

string manipulationATRMultStr = "Custom"
//float manipulationATRMult = input.float(0.6, "Minimum Manipulation Size", step = 0.05, group = "General Configuration")
//manipulationATRMultStr := input.string("Low", "Manipulation Size", options = ["Low", "High"], group = "General Configuration")
if algorithmMode == "Small Manipulation"
    manipulationATRMultStr := "Low"
else
    manipulationATRMultStr := "High"
float manipulationATRMult = (manipulationATRMultStr == "High" ? 1 : manipulationATRMultStr == "Low" ? 0.6 : na)

dbgLabelSize = DEBUG ? input.string("Small", "[DBG] Label Size", ["Normal", "Small", "Tiny"], group = "General Configuration") : "Normal"
lblSize = (dbgLabelSize == "Small" ? size.small : dbgLabelSize == "Normal" ? size.normal : size.tiny)

showTPSL = input.bool(true, "Enabled", group = "TP / SL")
dbgTPSLVersion = input.string("Default", "TP / SL Layout", options = ["Default", "Alternative"], group = "TP / SL")
tpslMethod = input.string("Dynamic", "TP / SL Method", options = ["Dynamic", "Fixed"], group = "TP / SL")
riskAmount = input.string("Normal", "Risk", options = ["Highest", "High", "Normal", "Low", "Lowest"], group = "TP / SL", tooltip = "The risk amount when Dynamic TP / SL method is selected.\n\nDifferent assets may have different volatility so changing this setting may result in change of performance of the indicator.")
customSLATRMult = DEBUG ? input.float(6.5, "Custom Risk Mult", group = "TP / SL") : 6.5

slATRMult = riskAmount == "Highest" ? 9.5 : riskAmount == "High" ? 6 : riskAmount == "Normal" ? 5 : riskAmount == "Low" ? 4 : riskAmount == "Lowest" ? 1.5 : customSLATRMult
tpPercent = input.float(0.3, "Take Profit %", group = "TP / SL")
slPercent = input.float(0.4, "Stop Loss %", group = "TP / SL")

backtestDisplayEnabled = input.bool(true, "Enabled", group = "Backtesting Dashboard", display = display.none)
backtestingLocation = input.string("Top Center", "Position", options = ["Top Right", "Right Center", "Top Center"], group = "Backtesting Dashboard", display = display.none)
fillBackgrounds = input.bool(true, "Fill Backgrounds", group = "Backtesting Dashboard", display = display.none)
screenerColor = input.color(#1B1F2B, 'Background', inline = "1", group = 'Backtesting Dashboard', display = display.none)

RR = DEBUG ? input.float(0.86, "Risk:Reward Ratio", group = "Debug") : 0.86

showZones = input.bool(true, "Show Zones", group = "Visuals")
highColor = input.color(color.green, "Buy", inline = "colors", group = "Visuals")
lowColor = input.color(color.red, "Sell", inline = "colors", group = "Visuals")
textColor = input.color(color.white, "Text", inline = "colors", group = "Visuals")

buyAlertEnabled = input.bool(true, "Buy Signal", inline = "BS", group = "Alerts")
sellAlertEnabled = input.bool(true, "Sell Signal", inline = "BS", group = "Alerts")
tpAlertEnabled = input.bool(true, "Take-Profit Signal", inline = "TS", group = "Alerts")
slAlertEnabled = input.bool(true, "Stop-Loss Signal ", inline = "TS", group = "Alerts")

buyAlertTick = false
sellAlertTick = false
tpAlertTick = false
slAlertTick = false

getPosition (positionText) =>
    if positionText == "Top Right"
        position.top_right
    else if positionText == "Top Center"
        position.top_center
    else if positionText == "Right Center"
        position.middle_right
    else if positionText == "Left Center"
        position.middle_left
    else if positionText == "Bottom Center"
        position.bottom_center
    else if positionText == "Middle Center"
        position.middle_center

type PO3
    string state
    int startTime

    float accumulationTop = na
    float accumulationBottom = na
    float accumulationEndTop = na
    float accumulationEndBottom = na
    int accumulationStartIndex = na
    int accumulationEndIndex = na

    float manipulationTop = na
    float manipulationBottom = na
    int manipulationStartIndex = na
    int manipulationEndIndex = na
    string manipulationDirection = na

    float slTarget
    float tpTarget
    string entryType
    int entryTime
    int exitTime
    float entryPrice
    float exitPrice
    int dayEndedBeforeExit

var lineX = array.new<line>()
var boxX = array.new<box>()
var labelX = array.new<label>()

var PO3[] PO3List = array.new<PO3>(0)
var PO3 lastPO3 = na

atr = ta.atr(atrLen)

diffPercent (float val1, float val2) =>
    (math.abs(val1 - val2) / val2) * 100.0

highestAccumulation = ta.highest(accumulationLength)
lowestAccumulation = ta.lowest(accumulationLength)
lowBreakout = (breakoutMethod == "Wick" ? low : close)
highBreakout = (breakoutMethod == "Wick" ? high : close)

//#region PO3
if bar_index > last_bar_index - maxDistanceToLastBar and barstate.isconfirmed
    if true
        // Find Session Start
        createNewPO3 = true
        if not na(lastPO3)
            if na(lastPO3.exitPrice)
                createNewPO3 := false // Don't enter if a trade is already entered
                
        if createNewPO3
            newPO3 = PO3.new("Waiting For Accumulation", time)
            PO3List.unshift(newPO3)
            lastPO3 := newPO3
            log.info("New PO3")
            log.info("Waiting For Accumulation")

        if not na(lastPO3)
            // Find Accumulation
            if lastPO3.state == "Waiting For Accumulation"
                if (highestAccumulation - lowestAccumulation) <= atr * accumulationATRMult
                    log.info("Waiting For Accumulation End")
                    lastPO3.state := "Waiting For Accumulation End"
                    lastPO3.accumulationStartIndex := bar_index - accumulationLength
                    lastPO3.accumulationEndIndex := bar_index
                    lastPO3.accumulationTop := highestAccumulation + (atr * accumulationExpandMult)
                    lastPO3.accumulationBottom := lowestAccumulation - (atr * accumulationExpandMult)
            if lastPO3.state == "Waiting For Accumulation End"
                if highBreakout > lastPO3.accumulationTop or lowBreakout < lastPO3.accumulationBottom
                    log.info("Waiting For Manipulation")
                    lastPO3.state := "Waiting For Manipulation"
                    lastPO3.accumulationEndTop := highBreakout
                    lastPO3.accumulationEndBottom := lowBreakout
                else
                    lastPO3.accumulationEndIndex := bar_index
            
            // Find Manipulation
            if lastPO3.state == "Waiting For Manipulation"
                if bar_index > lastPO3.accumulationEndIndex
                    if highBreakout > lastPO3.accumulationTop + (atr * manipulationATRMult)
                        log.info("Waiting For Distribution")
                        lastPO3.state := "Waiting For Distribution"
                        lastPO3.manipulationDirection := "Bullish"
                        lastPO3.manipulationStartIndex := lastPO3.accumulationEndIndex
                        lastPO3.manipulationEndIndex := bar_index
                        lastPO3.manipulationTop := highBreakout
                        lastPO3.manipulationBottom := lastPO3.accumulationEndBottom
                    else if lowBreakout < lastPO3.accumulationBottom - (atr * manipulationATRMult)
                        log.info("Waiting For Distribution")
                        lastPO3.state := "Waiting For Distribution"
                        lastPO3.manipulationDirection := "Bearish"
                        lastPO3.manipulationStartIndex := lastPO3.accumulationEndIndex
                        lastPO3.manipulationEndIndex := bar_index
                        lastPO3.manipulationTop := lastPO3.accumulationEndTop
                        lastPO3.manipulationBottom := lowBreakout
            
            // Find Distribution
            if lastPO3.state == "Waiting For Distribution"
                lastPO3.state := "Entry Taken"
                lastPO3.entryTime := time
                lastPO3.entryPrice := close
                if lastPO3.manipulationDirection == "Bearish"
                    lastPO3.entryType := "Long"
                    buyAlertTick := true
                    if tpslMethod == "Fixed"
                        lastPO3.slTarget := lastPO3.entryPrice * (1 - slPercent / 100.0)
                        lastPO3.tpTarget := lastPO3.entryPrice * (1 + tpPercent / 100.0)
                    else
                        lastPO3.slTarget := lastPO3.entryPrice - atr * slATRMult
                        lastPO3.tpTarget := lastPO3.entryPrice + (math.abs(lastPO3.entryPrice - lastPO3.slTarget) * RR)
                else
                    lastPO3.entryType := "Short"
                    sellAlertTick := true
                    if tpslMethod == "Fixed"
                        lastPO3.slTarget := lastPO3.entryPrice * (1 + slPercent / 100.0)
                        lastPO3.tpTarget := lastPO3.entryPrice * (1 - tpPercent / 100.0)
                    else
                        lastPO3.slTarget := lastPO3.entryPrice + atr * slATRMult
                        lastPO3.tpTarget := lastPO3.entryPrice - (math.abs(lastPO3.entryPrice - lastPO3.slTarget) * RR)
    
    // Entry Taken
    if not na(lastPO3)
        if lastPO3.state == "Entry Taken" and time > lastPO3.entryTime
            log.info("Entry Taken")
            if tpslMethod == "Fixed"
                // Take Profit
                if lastPO3.entryType == "Long" and ((high / lastPO3.entryPrice) - 1) * 100 >= tpPercent
                    tpAlertTick := true
                    lastPO3.exitPrice := lastPO3.entryPrice * (1 + tpPercent / 100.0)
                    lastPO3.exitTime := time
                    lastPO3.state := "Take Profit"
                if lastPO3.entryType == "Short" and ((low / lastPO3.entryPrice) - 1) * 100 <= -tpPercent
                    tpAlertTick := true
                    lastPO3.exitPrice := lastPO3.entryPrice * (1 - tpPercent / 100.0)
                    lastPO3.exitTime := time
                    lastPO3.state := "Take Profit"
                
                // Stop Loss
                if lastPO3.entryType == "Long" and ((low / lastPO3.entryPrice) - 1) * 100 <= -slPercent
                    slAlertTick := true
                    lastPO3.exitPrice := lastPO3.entryPrice * (1 - slPercent / 100.0)
                    lastPO3.exitTime := time
                    lastPO3.state := "Stop Loss"
                if lastPO3.entryType == "Short" and ((high / lastPO3.entryPrice) - 1) * 100 >= slPercent
                    slAlertTick := true
                    lastPO3.exitPrice := lastPO3.entryPrice * (1 + slPercent / 100.0)
                    lastPO3.exitTime := time
                    lastPO3.state := "Stop Loss"
            else
                // Take Profit
                if lastPO3.entryType == "Long" and high >= lastPO3.tpTarget
                    tpAlertTick := true
                    lastPO3.exitPrice := lastPO3.tpTarget
                    lastPO3.exitTime := time
                    lastPO3.state := "Take Profit"
                if lastPO3.entryType == "Short" and low <= lastPO3.tpTarget
                    tpAlertTick := true
                    lastPO3.exitPrice := lastPO3.tpTarget
                    lastPO3.exitTime := time
                    lastPO3.state := "Take Profit"
                
                // Stop Loss
                if lastPO3.entryType == "Long" and low <= lastPO3.slTarget
                    slAlertTick := true
                    lastPO3.exitPrice := lastPO3.slTarget
                    lastPO3.exitTime := time
                    lastPO3.state := "Stop Loss"
                if lastPO3.entryType == "Short" and high >= lastPO3.slTarget
                    slAlertTick := true
                    lastPO3.exitPrice := lastPO3.slTarget
                    lastPO3.exitTime := time
                    lastPO3.state := "Stop Loss"
//#endregion

//#region Render PO3

renderTopSL = false
renderBottomSL = false
renderTopTP = false
renderBottomTP = false

if not na(lastPO3)
    if lastPO3.state == "Stop Loss" and time >= lastPO3.exitTime
        if lastPO3.entryType == "Long"
            renderBottomSL := true
        else
            renderTopSL := true
        lastPO3.state := "Done"
    if lastPO3.state == "Take Profit"
        if lastPO3.entryType == "Long"
            renderTopTP := true
        else
            renderBottomTP := true
        lastPO3.state := "Done"

plotshape(renderTopSL, "", shape.circle, location.abovebar, color.red, textcolor = textColor, text = "SL", size = size.tiny)
plotshape(renderBottomSL, "", shape.circle, location.belowbar, color.red, textcolor = textColor, text = "SL", size = size.tiny)
plotshape(renderTopTP, "", shape.xcross, location.abovebar, color.blue, textcolor = textColor, text = "TP", size = size.tiny)
plotshape(renderBottomTP, "", shape.xcross, location.belowbar, color.blue, textcolor = textColor, text = "TP", size = size.tiny)

//#endregion

//#region Alerts
if barstate.islastconfirmedhistory
    initRun := false

alertcondition(buyAlertTick and not initRun, "Buy Signal", "")
alertcondition(sellAlertTick and not initRun, "Sell Signal", "")
alertcondition(tpAlertTick and not initRun, "Take-Profit Signal", "")
alertcondition(slAlertTick and not initRun, "Stop-Loss Signal", "")

if not initRun
    if buyAlertTick and buyAlertEnabled
        alert("Buy Signal")
    if sellAlertTick and sellAlertEnabled
        alert("Sell Signal")
    
    if tpAlertTick and tpAlertEnabled
        alert("Take-Profit Signal")
    if slAlertTick and slAlertEnabled
        alert("Stop-Loss Signal")

//#endregion

//#region Backtesting Dashboard

if barstate.islast and backtestDisplayEnabled
    var table backtestDisplay = table.new(getPosition(backtestingLocation), 2, 10, bgcolor = screenerColor, frame_width = 2, frame_color = color.black, border_width = 1, border_color = color.black)
    
    float totalTSProfitPercent = 0
    int successfulTrades = 0
    int unsuccessfulTrades = 0

    if PO3List.size() > 0
        for i = 0 to PO3List.size() - 1
            curPO3 = PO3List.get(i)
            if not na(curPO3.entryPrice)
                isSuccess = false
                if not na(curPO3.exitPrice)
                    if (curPO3.entryType == "Long" and curPO3.exitPrice > curPO3.entryPrice) or (curPO3.entryType == "Short" and curPO3.exitPrice < curPO3.entryPrice)
                        totalTSProfitPercent += math.abs(diffPercent(curPO3.entryPrice, curPO3.exitPrice))
                        isSuccess := true
                    else
                        totalTSProfitPercent -= math.abs(diffPercent(curPO3.entryPrice, curPO3.exitPrice))
                        isSuccess := false

                if isSuccess
                    successfulTrades += 1
                else
                    unsuccessfulTrades += 1
    
    // Header
    table.merge_cells(backtestDisplay, 0, 0, 1, 0)
    table.cell(backtestDisplay, 0, 0, "PO3 Backtesting", text_color = color.white, bgcolor = screenerColor)

    // Total ORBs
    table.cell(backtestDisplay, 0, 1, "Total Entries", text_color = color.white, bgcolor = screenerColor)
    table.cell(backtestDisplay, 1, 1, str.tostring(successfulTrades + unsuccessfulTrades), text_color = color.white, bgcolor = screenerColor)

    // Wins
    table.cell(backtestDisplay, 0, 2, "Wins", text_color = color.white, bgcolor = screenerColor)
    table.cell(backtestDisplay, 1, 2, str.tostring(successfulTrades), text_color = color.white, bgcolor = screenerColor)

    // Losses
    table.cell(backtestDisplay, 0, 3, "Losses", text_color = color.white, bgcolor = screenerColor)
    table.cell(backtestDisplay, 1, 3, str.tostring(unsuccessfulTrades), text_color = color.white, bgcolor = screenerColor)

    // Winrate
    table.cell(backtestDisplay, 0, 4, "Winrate", text_color = color.white, bgcolor = screenerColor)
    table.cell(backtestDisplay, 1, 4, str.tostring(100.0 * (successfulTrades / (successfulTrades + unsuccessfulTrades)), "#.##") + "%", text_color = color.white, bgcolor = screenerColor)

    // Average Profit %
    table.cell(backtestDisplay, 0, 5, "Average Profit", text_color = color.white, bgcolor = screenerColor)
    table.cell(backtestDisplay, 1, 5, str.tostring(totalTSProfitPercent / (successfulTrades + unsuccessfulTrades), "#.##") + "%", text_color = color.white, bgcolor = screenerColor)

    // Total Profit %
    table.cell(backtestDisplay, 0, 6, "Total Profit", text_color = color.white, bgcolor = screenerColor)
    table.cell(backtestDisplay, 1, 6, str.tostring(totalTSProfitPercent, "#.##") + "%", text_color = color.white, bgcolor = screenerColor)

//#endregion

if barstate.isconfirmed
    if lineX.size() > 0
        for i = 0 to lineX.size() - 1
            line.delete(lineX.get(i))

    if boxX.size() > 0
        for i = 0 to boxX.size() - 1
            box.delete(boxX.get(i))
    
    if labelX.size() > 0
        for i = 0 to labelX.size() - 1
            label.delete(labelX.get(i))

    lineX.clear()
    boxX.clear()
    labelX.clear()
    
    if PO3List.size() > 0
        for i = 0 to math.min(maxPO3, PO3List.size() - 1)
            curTS = PO3List.get(i)
            if showZones
                // Accumulation Box
                if not na(curTS.accumulationEndIndex)
                    if bar_index - curTS.accumulationStartIndex < maxDistanceToLastBar
                        boxX.push(box.new(curTS.accumulationStartIndex, curTS.accumulationTop, curTS.accumulationEndIndex, curTS.accumulationBottom, bgcolor = accumulationColor, border_width = 0))

                // Manipulation Box
                if not na(curTS.manipulationEndIndex)
                    if bar_index - curTS.manipulationStartIndex < maxDistanceToLastBar
                        boxX.push(box.new(curTS.manipulationStartIndex, curTS.manipulationTop, curTS.manipulationEndIndex, curTS.manipulationBottom, bgcolor = manipulationColor, border_width = 0))    

            // TP / SL
            if not na(curTS.entryTime)
                // Entry Label
                if curTS.entryType == "Long"
                    labelX.push(label.new(curTS.entryTime, close, "Buy", xloc = xloc.bar_time, yloc = yloc.belowbar, textcolor = textColor, color = highColor, style = label.style_label_up, size = lblSize))
                else
                    labelX.push(label.new(curTS.entryTime, close, "Sell", xloc = xloc.bar_time, yloc = yloc.abovebar, textcolor = textColor, color = lowColor, style = label.style_label_down, size = lblSize))
                
                if showTPSL
                    if dbgTPSLVersion == "Alternative"
                        offset = atr / 3.0
                        endTime = nz(curTS.exitTime, time("", -15))
                        boxX.push(box.new(curTS.entryTime, curTS.tpTarget + offset, endTime, curTS.tpTarget - offset, text = "TAKE PROFIT (" + str.tostring(curTS.tpTarget, format.mintick) + ")", text_color = textColor, xloc = xloc.bar_time, border_width = 0, bgcolor = color.new(highColor, 50), text_size = size.small))
                        boxX.push(box.new(curTS.entryTime, curTS.slTarget + offset, endTime, curTS.slTarget - offset, text = "STOP LOSS (" + str.tostring(curTS.slTarget, format.mintick) + ")", text_color = textColor, xloc = xloc.bar_time, border_width = 0, bgcolor = color.new(lowColor, 50) , text_size = size.small))
                    else if dbgTPSLVersion == "Default"
                        endTime = nz(curTS.exitTime, time("", -15))
                        lineX.push(line.new(curTS.entryTime, curTS.entryPrice, curTS.entryTime, curTS.tpTarget, xloc = xloc.bar_time, color = highColor, style = line.style_dashed))
                        lineX.push(line.new(curTS.entryTime, curTS.tpTarget, endTime, curTS.tpTarget, xloc = xloc.bar_time, color = highColor, style = line.style_dashed))
                        labelX.push(label.new(endTime, curTS.tpTarget, "TP", xloc = xloc.bar_time, yloc = yloc.price, textcolor = textColor, color = color.new(highColor, 50), style = label.style_label_left, size = lblSize))
                        //
                        lineX.push(line.new(curTS.entryTime, curTS.entryPrice, curTS.entryTime, curTS.slTarget, xloc = xloc.bar_time, color = lowColor, style = line.style_dashed))
                        lineX.push(line.new(curTS.entryTime, curTS.slTarget, endTime, curTS.slTarget, xloc = xloc.bar_time, color = lowColor, style = line.style_dashed))
                        labelX.push(label.new(endTime, curTS.slTarget, "SL", xloc = xloc.bar_time, yloc = yloc.price, textcolor = textColor, color = color.new(lowColor, 50), style = label.style_label_left, size = lblSize))

            if not na(curTS.dayEndedBeforeExit)
                labelX.push(label.new(curTS.dayEndedBeforeExit, close, "Exit", xloc = xloc.bar_time, yloc = yloc.belowbar, textcolor = textColor, color = color.yellow, style = label.style_circle, size = size.tiny))